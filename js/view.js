// Generated by CoffeeScript 1.3.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

define(['subscriber', 'state_machine', 'ext/string'], function(Subscriber, StateMachine, StringEx) {
  'use strict';

  /*
  	Private Methods
  */

  var View, afterRender, beforeRender;
  beforeRender = function() {};
  afterRender = function() {
    return this.appendToContainer();
  };
  /*
  	View Class
  */

  View = (function(_super) {

    __extends(View, _super);

    View.name = 'View';

    _(View.prototype).defaults(Subscriber);

    _(View.prototype).defaults(StateMachine);

    View.prototype.containerSelector = '#content';

    View.prototype.autoRender = true;

    View.prototype.states = {};

    View.prototype.template = null;

    View.prototype.transitions = {};

    View.prototype.subscriptions = {};

    View.prototype.disposed = false;

    function View(options) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      this._registeredEvents = {};
      this.currentState = 'normal';
      this.$containerSelector = $(this.containerSelector);
      this.render = _.wrap(this.render, function(renderFunc) {
        var ret;
        _this.trigger('before:render');
        beforeRender.apply(_this);
        ret = renderFunc.apply(_this);
        _this.trigger('after:render');
        afterRender.apply(_this);
        return ret;
      });
      View.__super__.constructor.call(this, options);
    }

    View.prototype.appendToContainer = function() {
      if (this.$containerSelector.has(this.el).length === 0) {
        this.$el.hide();
        this.$containerSelector.append(this.el);
        return this.$el.fadeIn(200);
      }
    };

    View.prototype.fillModel = function(model, form) {
      return _.each(form.find(':input'), function(input) {
        var modelFieldName;
        modelFieldName = $(input).data('field');
        if (modelFieldName != null) {
          return model.set(modelFieldName, $(input).val());
        }
      });
    };

    View.prototype.fillForm = function(form, model) {
      return _.each(form.find(':input'), function(input) {
        var modelFieldName;
        modelFieldName = $(input).data('field');
        if (modelFieldName != null) {
          return $(input).val(model.get(modelFieldName));
        }
      });
    };

    View.prototype.delegate = function(eventType, selector, handler) {
      var eventTypes, _delegateHandler,
        _this = this;
      if (typeof eventType !== 'string') {
        throw new TypeError("View#delegate: first argument must be a string " + this.cid);
      }
      if (!_.isFunction(handler)) {
        throw new TypeError("View#delegate: handler should be a function on " + this.cid);
      }
      _delegateHandler = function(eventType, selector, handler) {
        eventType += ".delegate." + _this.cid;
        handler = _(handler).bind(_this);
        return _this.$el.on(eventType, selector, handler);
      };
      eventTypes = eventType.split(',');
      if (eventTypes.length > 1) {
        return _.each(eventTypes, function(eventType) {
          return _delegateHandler($.trim(eventType), selector, handler);
        });
      } else {
        return _delegateHandler(eventType, selector, handler);
      }
    };

    View.prototype.initialize = function(options) {
      if (options == null) {
        options = {};
      }
      View.__super__.initialize.call(this, options);
      if ((options.template != null) && this.template === null) {
        return this.template = Handlebars.compile(options.template);
      }
    };

    View.prototype.modelBind = function(eventType, handlerFunc) {
      var handlers, model, _base;
      if (!_(eventType).isString()) {
        throw new TypeError('View#modelBind: eventType should be a string');
      }
      if (!_(handlerFunc).isFunction()) {
        throw new TypeError('View#modelBind: handlerFunc should be a function');
      }
      model = this.model || this.collection;
      if (!model) {
        return;
      }
      handlers = (_base = this._registeredEvents)[eventType] || (_base[eventType] = []);
      if (_(handlers).include(handlerFunc)) {
        return;
      }
      handlers.push(handlerFunc);
      return model.on(eventType, handlerFunc, this);
    };

    View.prototype.modelUnbind = function(eventType, handlerFunc) {
      var handlers, index, model;
      if (!_(eventType).isString()) {
        throw new TypeError('View#modelUnbind: eventType should be a string');
      }
      if (!_(handlerFunc).isFunction()) {
        throw new TypeError('View#modelUnbind: handlerFunc should be a function');
      }
      model = this.model || this.collection;
      if (!model) {
        return;
      }
      handlers = this._registeredEvents[eventType];
      if (handlers) {
        index = _(handlers).indexOf(handlerFunc);
        if (index > -1) {
          handlers.splice(index, 1);
        }
        if (handlers.length === 0) {
          delete this._registeredEvents[type];
        }
      }
      return model.off(eventType, handlerFunc, this);
    };

    View.prototype.modelUnbindAll = function() {
      var handler, handlers, model, type, _i, _len, _ref;
      if (!this._registeredEvents) {
        return;
      }
      model = this.model || this.collection;
      if (!model) {
        return;
      }
      _ref = this._registeredEvents;
      for (type in _ref) {
        if (!__hasProp.call(_ref, type)) continue;
        handlers = _ref[type];
        for (_i = 0, _len = handlers.length; _i < _len; _i++) {
          handler = handlers[_i];
          model.unbind(type, handler);
        }
      }
      return this._registeredEvents = {};
    };

    View.prototype.dispose = function() {
      if (this.disposed) {
        return;
      }
      this.modelUnbindAll();
      this.unsubscribeAllEvents();
      this.remove();
      return this.disposed = true;
    };

    return View;

  })(Backbone.View);
  return View;
});

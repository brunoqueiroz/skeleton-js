// Generated by CoffeeScript 1.3.1

define(['eventbus', 'ext/string'], function(EventBus, StringExt) {
  'use strict';

  var Application, onControllerLoaded;
  onControllerLoaded = function(controllerName, action, params, controllerClass) {
    var _this = this;
    return this.disposeCurrentController().done(function() {
      _this.initializeController(controllerName, params, controllerClass);
      return _this.callControllerAction(action, params);
    });
  };
  Application = (function() {

    Application.name = 'Application';

    _(Application.prototype).defaults(Backbone.Events);

    Application.prototype.siteTitle = 'Application';

    Application.prototype.currentParams = null;

    Application.prototype.currentControllerName = null;

    Application.prototype.currentView = null;

    Application.prototype.currentViewParams = null;

    Application.prototype.previousController = null;

    function Application(name) {
      this.name = name;
      if (!(this.name != null)) {
        throw new Error('Every application must have a name');
      }
      window.Application = {
        Collections: {},
        Models: {},
        Views: {}
      };
      this.initialize();
      this.initializeEvents();
      return;
    }

    Application.prototype.initializeEvents = function() {
      var _this = this;
      return EventBus.subscribe('Route.Matched', function(route, params) {
        var action, controllerName;
        controllerName = route.controller;
        action = route.action;
        if (_this.loadingPromise != null) {
          return _this.loadingPromise.done(function() {
            return _this.initializeControllerAndAction(controllerName, action, params);
          });
        } else {
          return _this.initializeControllerAndAction(controllerName, action, params);
        }
      });
    };

    Application.prototype.initialize = function() {};

    Application.prototype.initializeControllerAndAction = function(controllerName, action, params) {
      var controllerFileName, isSameAction, isSameController,
        _this = this;
      if (action == null) {
        action = 'index';
      }
      if (params == null) {
        params = {};
      }
      this.loadingPromise = $.Deferred();
      isSameController = this.currentControllerName === controllerName;
      if (isSameController) {
        isSameAction = this.currentAction === action && ((this.currentParams != null) || this.currentParams);
        return this.disposeCurrentAction().done(function() {
          if (!isSameAction) {
            return _this.callControllerAction(action, params);
          }
        });
      } else {
        controllerFileName = StringExt.underscorize(controllerName + '_controller');
        return require(['controllers/' + controllerFileName], _(onControllerLoaded).bind(this, controllerName, action, params));
      }
    };

    Application.prototype.disposeCurrentController = function() {
      var defObj,
        _this = this;
      defObj = $.Deferred();
      if (this.currentController) {
        if (!((this.currentController.dispose != null) && _.isFunction(this.currentController.dispose))) {
          throw new Error("Application#onControllerLoaded: A dispose method should be provided on " + this.currentControllerName);
        }
        this.disposeCurrentAction().done(function() {
          _this.currentController.dispose();
          _this.currentController = null;
          _this.currentControllerName = null;
          return defObj.resolve();
        });
      } else {
        defObj.resolve();
      }
      return defObj;
    };

    Application.prototype.disposeCurrentAction = function() {
      var defObj,
        _this = this;
      defObj = $.Deferred();
      if (this.currentView) {
        this.currentView.$el.fadeOut(200, function() {
          _this.currentView.dispose();
          _this.currentView = null;
          _this.currentViewParams = null;
          _this.currentParams = null;
          return defObj.resolve();
        });
      } else {
        defObj.resolve();
      }
      return defObj;
    };

    Application.prototype.initializeController = function(controllerName, params, controllerClass) {
      var controller;
      controller = new controllerClass();
      controller.initialize(params);
      this.previousController = this.currentControllerName;
      this.currentControllerName = controllerName;
      this.currentController = controller;
      return this.trigger('Controller.Initialized', controller);
    };

    Application.prototype.callControllerAction = function(action, params) {
      var actionName, loadingTimer,
        _this = this;
      if (!(this.currentController != null)) {
        throw new Error('You must have an active controller in order to call an specific action');
      }
      actionName = StringExt.camelize(action);
      if (!_.isFunction(this.currentController[action])) {
        throw new Error("We can't find a method called '" + actionName + "' on the controller with id '" + this.currentController.id + "'");
      }
      this.viewDeferred = this.currentController[actionName](params);
      this.currentViewParams = params;
      loadingTimer = setTimeout(function() {
        return $('body').addClass('loading');
      }, 1000);
      if (this.viewDeferred && _(this.viewDeferred).has('state')) {
        return this.viewDeferred.done(function(viewInstance) {
          clearTimeout(loadingTimer);
          $('body').removeClass('loading');
          _this.currentView = viewInstance;
          _this.trigger('Action.Called', _this.currentView);
          _this.viewDeferred = null;
          _this.loadingPromise.resolve();
          if (_this.loadingPromise.state() === 'resolved') {
            return _this.loadingPromise = null;
          }
        });
      } else if (this.currentController.view != null) {
        this.currentView = this.currentController.view;
        return this.trigger('Action.Called', this.currentView);
      } else {
        throw new Error("The controller action " + actionName + " of the " + this.currentController.id + " isn't returning a view.");
      }
    };

    return Application;

  })();
  return Application;
});
